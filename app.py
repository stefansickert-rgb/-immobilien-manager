# --- Build Version: v5.1.7 | generated 2025-10-03 21:38:21 ---\n\n# --- Unified sidebar user box ---\nimport streamlit as st\nif st.session_state.get("auth"):\n    with st.sidebar:\n        st.caption(f"Eingeloggt als: **{st.session_state['auth']['username']}**")\n        if st.button("Logout", key="logout_btn"):\n            st.session_state.pop("auth", None)\n            st.rerun()\n# --- Build Version: v5.1.6 | generated 2025-10-03 21:20:38 ---\nimport datetime as dt\nimport streamlit as st\nfrom core.db import init_db, SessionCtx, UserProfile, get_engine\nfrom core.i18n import t\n\n# DB initialisieren (Schema-Version an deine aktuelle anpassen, z.B. 3)\ninit_db(schema_version=8)\n\n# Seiten-Setup\nst.set_page_config(page_title=t("app_title"), page_icon="üè†", layout="wide")\n\n# Sidebar-Navigation verstecken, solange nicht eingeloggt\ndef _hide_nav_when_logged_out():\n    import streamlit as st\n    if not st.session_state.get("auth"):\n        st.markdown("""\n            <style>\n              [data-testid="stSidebarNav"] { display: none !important; }\n              [data-testid="stSidebar"] [data-testid="stSidebarNav"] ~ div { display: none !important; }\n            </style>\n        """, unsafe_allow_html=True)\n\n_hide_nav_when_logged_out()\n\n# ----------------------- SIMPLE LOGIN GATE -----------------------\nimport streamlit as st\nfrom core.db import ensure_admin_user, SessionCtx, User\nfrom core.auth import hash_password, verify_password\n\ntry:\n    ensure_admin_user("hannes", hash_password("hannes"), role="admin", email=None, full_name="hannes")\nexcept Exception:\n    pass\n\ndef _do_login(u, p):\n    with SessionCtx() as s:\n        user = s.query(User).filter(User.username == u, User.is_active == True).one_or_none()\n        if user and verify_password(p, user.password_hash):\n            st.session_state.auth = {"username": user.username, "name": user.full_name or user.username, "role": user.role}\n            return True\n    return False\n\ndef _do_register(u, mail, name, p1, p2):\n    if not u or not p1:\n        return "Bitte Benutzername und Passwort ausf√ºllen."\n    if p1 != p2:\n        return "Passw√∂rter stimmen nicht √ºberein."\n    with SessionCtx() as s:\n        exists = s.query(User).filter(User.username == u).one_or_none()\n        if exists:\n            return "Benutzername ist bereits vergeben."\n        s.add(User(username=u, email=mail or None, full_name=name or u, password_hash=hash_password(p1), role="viewer", is_active=True))\n        s.commit()\n    return None\n\nif not st.session_state.get("auth"):\n    st.subheader("Willkommen ‚Äì bitte anmelden oder registrieren")\n    tab_login, tab_register = st.tabs(["Anmelden", "Registrieren"])\n    with tab_login:\n        with st.form("login_form", clear_on_submit=False):\n            col1, col2 = st.columns(2)\n            with col1:\n                u = st.text_input("Benutzername", value="", key="login_user")\n            with col2:\n                p = st.text_input("Passwort", type="password", value="", key="login_pass")\n            ok = st.form_submit_button("Anmelden")\n        if ok:\n            if _do_login(u.strip(), p):\n                st.success("Erfolgreich angemeldet.")\n                st.rerun()\n            else:\n                st.error("Benutzername oder Passwort falsch.")\n    with tab_register:\n        with st.form("register_form"):\n            u2 = st.text_input("Benutzername")\n            name2 = st.text_input("Vollst√§ndiger Name", value="")\n            mail2 = st.text_input("E-Mail (optional)", value="")\n            c1, c2 = st.columns(2)\n            with c1:\n                p1 = st.text_input("Passwort", type="password")\n            with c2:\n                p2 = st.text_input("Passwort wiederholen", type="password")\n            okr = st.form_submit_button("Registrieren")\n        if okr:\n            err = _do_register(u2.strip(), mail2.strip(), name2.strip(), p1, p2)\n            if err:\n                st.error(err)\n            else:\n                st.success("Registrierung erfolgreich ‚Äì bitte jetzt anmelden.")\n    st.stop()\n\n        st.session_state.pop("auth", None)\n        st.rerun()\n# -----------------------------------------------------------------\n\n# ----------------------- SIMPLE LOGIN GATE -----------------------\nimport streamlit as st\nfrom core.db import ensure_admin_user, SessionCtx, User\nfrom core.auth import hash_password, verify_password\n\ntry:\n    ensure_admin_user("hannes", hash_password("hannes"), role="admin", email=None, full_name="hannes")\nexcept Exception:\n    pass\n\ndef _do_login(u, p):\n    with SessionCtx() as s:\n        user = s.query(User).filter(User.username == u, User.is_active == True).one_or_none()\n        if user and verify_password(p, user.password_hash):\n            st.session_state.auth = {"username": user.username, "name": user.full_name or user.username, "role": user.role}\n            return True\n    return False\n\nif not st.session_state.get("auth"):\n    st.subheader("Login")\n    with st.form("login_form", clear_on_submit=False):\n        col1, col2 = st.columns(2)\n        with col1:\n            u = st.text_input("Benutzername", value="", key="login_user")\n        with col2:\n            p = st.text_input("Passwort", type="password", value="", key="login_pass")\n        ok = st.form_submit_button("Anmelden")\n    if ok:\n        if _do_login(u.strip(), p):\n            st.success("Erfolgreich angemeldet.")\n            st.rerun()\n        else:\n            st.error("Benutzername oder Passwort falsch.")\n    st.stop()\n\n        st.session_state.pop("auth", None)\n        st.rerun()\n# -----------------------------------------------------------------\n\n# --- Hide Wohnung-Detail page entry robustly ---\nst.markdown(\n    """\n<style>\n/* Hide links that contain the slug anywhere */\nsection[data-testid="stSidebar"] a[href*="a_Wohnung_Detail"] { display:none !important; }\n/* Fallback for query-router */\nsection[data-testid="stSidebar"] a[href*="page=a%20Wohnung%20Detail"] { display:none !important; }\n</style>\n""",\n    unsafe_allow_html=True\n)\n\n\n# --- Hide Wohnung-Detail page entry from the sidebar navigation (robust for both routers) ---\nst.markdown(\n    """\n    <style>\n    /* Hide by path slug (new router with path segments) */\n    section[data-testid="stSidebar"] a[href$="/a_Wohnung_Detail"] { display:none !important; }\n    section[data-testid="stSidebar"] a[href$="a_Wohnung_Detail"] { display:none !important; }\n    /* Hide by query router (?page=...) as fallback */\n    section[data-testid="stSidebar"] a[href*="page=a%20Wohnung%20Detail"] { display:none !important; }\n    </style>\n    """,\n    unsafe_allow_html=True\n)\n\n\n# --- Hide detail subpage from sidebar navigation ---\nst.markdown(\n    """\n    <style>\n    /* Hide the Wohnung-Detail page link in the sidebar nav */\n    section[data-testid="stSidebar"] a[href*="03a_Wohnung_Detail"] { display: none !important; }\n    </style>\n    """,\n    unsafe_allow_html=True\n)\n\n\n# Sidebar-Kopf\nwith st.sidebar:\n    st.markdown("## üè† " + t("app_title"))\n    st.markdown("‚Äî")\n    st.caption(t("local_data_hint"))\n\n# --- Nutzerprofil-Tabelle sicherstellen (idempotent) ---\nUserProfile.__table__.create(bind=get_engine(), checkfirst=True)\n\n# --- Begr√º√üung: Tageszeit + Saison + Vorname ---\ndef _time_greeting(hour: int) -> str:\n    if 5 <= hour < 11:   return t("greet_morning")\n    if 11 <= hour < 17:  return t("greet_afternoon")\n    if 17 <= hour < 23:  return t("greet_evening")\n    return t("greet_night")\n\ndef _season(month: int) -> tuple[str, str]:\n    if month in (3, 4, 5):    return (t("spring"), "üå∑")\n    if month in (6, 7, 8):    return (t("summer"), "‚òÄÔ∏è")\n    if month in (9, 10, 11):  return (t("autumn"), "üçÇ")\n    return (t("winter"), "‚ùÑÔ∏è")\n\nnow = dt.datetime.now()\ngreet = _time_greeting(now.hour)\nseason_label, season_emoji = _season(now.month)\n\nwith SessionCtx() as s:\n    profile = s.query(UserProfile).limit(1).first()\nfirst_name = (profile.first_name or "").strip() if profile else ""\n\n# --- Startbildschirm (statt Dashboard) ---\nst.markdown(\n    f"### {greet}{', ' + first_name if first_name else ''}! {season_emoji} "\n    + t("season_greeting").format(season=season_label)\n)\n\nst.write("‚Äî")\nst.write("W√§hle links eine Seite aus (Dashboard, Objekte, ‚Ä¶).")\n